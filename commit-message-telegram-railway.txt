Telegram bot Railway deployment preparation with health monitoring

This commit prepares the Telegram bot for seamless Railway.app deployment with production monitoring and reliability:

ü§ñ Telegram Bot Railway Configuration:
- railway.json: Railway-specific deployment settings with health checks
- nixpacks.toml: Node.js build configuration for Railway
- Dockerfile: Alternative Docker deployment method
- Health check HTTP server on configurable port for Railway monitoring

üîß Production Bot Enhancements:
- Health check endpoints (/health, /) for Railway service monitoring
- Graceful shutdown handling with proper cleanup
- HTTP server for Railway health monitoring and status reporting
- Environment-based configuration (production/development)
- Auto-restart capabilities with Railway integration

üì¶ Node.js Dependencies and Configuration:
- Updated package.json with proper metadata and scripts
- Grammy framework for Telegram bot interactions
- MongoDB driver for database connectivity
- Environment variable configuration with dotenv
- Node.js engine specification for Railway compatibility

‚öôÔ∏è Environment Configuration:
- .env.railway: Template for Railway environment variables
- BOT_TOKEN and MONGODB_URI configuration
- Production Node.js settings (NODE_ENV=production)
- PORT configuration for Railway's dynamic port assignment

üõ°Ô∏è Production Features:
- Health monitoring server running alongside bot
- Database connection status reporting in health checks
- Graceful shutdown with proper resource cleanup
- Error handling and comprehensive logging
- Process title setting for easier identification

üìã Deployment Tools:
- deploy-railway.sh/bat: Cross-platform deployment preparation scripts
- RAILWAY_DEPLOYMENT.md: Comprehensive Telegram bot deployment guide
- .gitignore: Security-focused ignore patterns for tokens and secrets
- Environment validation and dependency checking

üéØ Bot Capabilities:
- AWS certification practice quizzes
- Multiple choice questions with single/multi-select support
- User session management and progress tracking
- Real-time quiz statistics and performance analytics
- Interactive inline keyboards for seamless user experience

üîê Security and Monitoring:
- Secure environment variable handling for bot tokens
- MongoDB connection string protection
- Health check endpoints for uptime monitoring
- Railway automatic restart on failure detection
- Comprehensive logging for debugging and monitoring

üìä Health Check Features:
- Service status and uptime reporting
- MongoDB connection status monitoring
- Version and environment information
- Railway-compatible health endpoint format
- JSON response format for monitoring tools

This provides a complete production-ready Telegram bot deployment setup for Railway with health monitoring, auto-restart capabilities, and comprehensive AWS certification quiz functionality.
