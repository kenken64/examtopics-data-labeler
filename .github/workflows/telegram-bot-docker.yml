name: Telegram Bot Docker Build & Publish

on:
  push:
    branches: [ q-labeler ]
    paths:
      - 'telegram-bot/**'
      - '.github/workflows/telegram-bot-docker.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'telegram-bot/**'
      - '.github/workflows/telegram-bot-docker.yml'
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: awscert-telegram-bot

jobs:
  test-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: ./telegram-bot
        file: ./telegram-bot/Dockerfile
        push: false
        tags: test:latest
        cache-from: type=gha,scope=test
        cache-to: type=gha,mode=max,scope=test
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run container smoke test
      run: |
        # Build and run container for quick smoke test
        docker build -t telegram-bot-test ./telegram-bot
        
        # Start container in background with dummy environment variables
        docker run -d --name telegram-bot-test-container \
          -p 8080:8080 \
          -e BOT_TOKEN=dummy_token_for_test \
          -e MONGODB_URI=mongodb://localhost:27017/test \
          -e FRONTEND_URL=http://localhost:3000 \
          telegram-bot-test
        
        # Wait for container to start
        sleep 15
        
        # Check if container is running
        if docker ps | grep -q telegram-bot-test-container; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs telegram-bot-test-container
          exit 1
        fi
        
        # Test health endpoint
        timeout 30 bash -c 'until wget --spider --quiet http://localhost:8080/health 2>/dev/null; do sleep 2; done' && {
          echo "✅ Health endpoint accessible"
        } || {
          echo "⚠️ Health endpoint not accessible, checking logs:"
          docker logs telegram-bot-test-container | tail -20
          echo "Note: This may be expected if bot requires valid Telegram token"
        }
        
        # Check if process is running (even if webhook fails due to dummy token)
        if docker exec telegram-bot-test-container ps aux | grep -q "node"; then
          echo "✅ Node.js process is running inside container"
        else
          echo "⚠️ Node.js process not detected"
        fi
        
        # Cleanup
        docker stop telegram-bot-test-container
        docker rm telegram-bot-test-container
        echo "✅ Smoke test completed"

  build-and-publish:
    name: Build and Push to DockerHub
    runs-on: ubuntu-latest
    needs: test-build
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PAT }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=AWS Certification Telegram Bot
          org.opencontainers.image.description=Telegram bot for AWS certification practice app
          org.opencontainers.image.vendor=ExamTopics
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./telegram-bot
        file: ./telegram-bot/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false

    - name: Generate deployment summary
      run: |
        echo "## 🐳 Telegram Bot Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Name**: \`${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: node:18-alpine" >> $GITHUB_STEP_SUMMARY
        echo "- **Framework**: Grammy.js (Telegram Bot API)" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Context**: ./telegram-bot" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: /health endpoint on port 8080" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Features" >> $GITHUB_STEP_SUMMARY
        echo "- **Non-root User**: Runs as nodejs user (UID 1001)" >> $GITHUB_STEP_SUMMARY
        echo "- **Production Dependencies**: Only production npm packages included" >> $GITHUB_STEP_SUMMARY
        echo "- **Alpine Linux**: Minimal attack surface with Alpine base image" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Required Environment Variables" >> $GITHUB_STEP_SUMMARY
        echo "- \`BOT_TOKEN\`: Telegram Bot API token" >> $GITHUB_STEP_SUMMARY
        echo "- \`MONGODB_URI\`: MongoDB connection string" >> $GITHUB_STEP_SUMMARY
        echo "- \`FRONTEND_URL\`: Frontend application URL for quiz links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. **Pull Image**: \`docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "2. **Run Container**: \`docker run -e BOT_TOKEN=your_token -e MONGODB_URI=your_uri ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Health Check**: Access \`http://localhost:8080/health\` to verify deployment" >> $GITHUB_STEP_SUMMARY
        echo "4. **Telegram Integration**: Configure webhook or polling mode as needed" >> $GITHUB_STEP_SUMMARY

    - name: Update DockerHub description
      uses: peter-evans/dockerhub-description@v4
      if: github.ref == 'refs/heads/master'
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PAT }}
        repository: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        short-description: "Telegram bot for AWS certification practice application"
        readme-filepath: ./telegram-bot/README.md