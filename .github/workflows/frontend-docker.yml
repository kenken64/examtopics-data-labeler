name: Frontend Docker Build & Publish

on:
  push:
    branches: [ q-labeler ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-docker.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-docker.yml'
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: awscert-frontend

jobs:
  test-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: test:latest
        cache-from: type=gha,scope=test
        cache-to: type=gha,mode=max,scope=test
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run container smoke test
      run: |
        # Build and run container for quick smoke test
        docker build -t frontend-test ./frontend
        
        # Start container in background
        docker run -d --name frontend-test-container -p 3000:3000 frontend-test
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        if docker ps | grep -q frontend-test-container; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs frontend-test-container
          exit 1
        fi
        
        # Test health endpoint (if available) or basic connection
        timeout 30 bash -c 'until curl -f http://localhost:3000 >/dev/null 2>&1; do sleep 1; done' || {
          echo "⚠️ HTTP endpoint not accessible (this may be expected for Next.js)"
          docker logs frontend-test-container
        }
        
        # Cleanup
        docker stop frontend-test-container
        docker rm frontend-test-container
        echo "✅ Smoke test completed"

  build-and-publish:
    name: Build and Push to DockerHub
    runs-on: ubuntu-latest
    needs: test-build
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PAT }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=AWS Certification Frontend
          org.opencontainers.image.description=Next.js frontend for AWS certification practice app
          org.opencontainers.image.vendor=ExamTopics
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false

    - name: Generate deployment summary
      run: |
        echo "## 🐳 Frontend Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Name**: \`${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Context**: ./frontend" >> $GITHUB_STEP_SUMMARY
        echo "- **Dockerfile**: ./frontend/Dockerfile" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. **Pull Image**: \`docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "2. **Run Container**: \`docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Environment Variables**: Configure MongoDB URI, JWT secret, and other environment variables" >> $GITHUB_STEP_SUMMARY

    - name: Update DockerHub description
      uses: peter-evans/dockerhub-description@v4
      if: github.ref == 'refs/heads/master'
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PAT }}
        repository: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        short-description: "Next.js frontend for AWS certification practice application"
        readme-filepath: ./frontend/README.md