name: "Master Branch Deployment"

on:
  push:
    branches: [master]
  workflow_dispatch:  # Allow manual trigger

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: "Pre-Deployment Validation"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Merge Source
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Validating that this push came from a validated PR...');
            
            // Get the commit that triggered this workflow
            const currentSha = context.sha;
            console.log(`Current commit: ${currentSha}`);
            
            // Check if this commit is from a recent PR merge
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'master',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            let isFromValidatedPR = false;
            let prInfo = null;
            
            for (const pr of pulls) {
              if (pr.merged && pr.merge_commit_sha === currentSha) {
                console.log(`Found merged PR #${pr.number}: ${pr.title}`);
                isFromValidatedPR = true;
                prInfo = pr;
                break;
              }
            }
            
            if (isFromValidatedPR && prInfo) {
              console.log('‚úÖ This deployment is from a validated PR merge');
              
              // Set output for next jobs
              core.exportVariable('PR_NUMBER', prInfo.number);
              core.exportVariable('PR_TITLE', prInfo.title);
              core.exportVariable('IS_VALIDATED_MERGE', 'true');
            } else {
              console.log('‚ö†Ô∏è This push is not from a recent PR merge');
              core.exportVariable('IS_VALIDATED_MERGE', 'false');
            }

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ vars.IS_VALIDATED_MERGE == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Frontend for Production
        working-directory: frontend
        run: |
          echo "üèóÔ∏è Building frontend for production deployment..."
          echo "This would typically include:"
          echo "- npm install"
          echo "- npm run build"
          echo "- Docker build and push"
          echo "- Deploy to production"
          
          # Placeholder for actual deployment commands
          echo "‚úÖ Frontend deployment completed"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ vars.IS_VALIDATED_MERGE == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Backend for Production
        working-directory: backend
        run: |
          echo "üèóÔ∏è Building backend for production deployment..."
          echo "This would typically include:"
          echo "- pip install requirements"
          echo "- Docker build and push"
          echo "- Deploy to production"
          
          # Placeholder for actual deployment commands
          echo "‚úÖ Backend deployment completed"

  deploy-telegram-bot:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ vars.IS_VALIDATED_MERGE == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Telegram Bot
        working-directory: telegram-bot
        run: |
          echo "ü§ñ Deploying Telegram bot..."
          echo "This would typically include:"
          echo "- npm install"
          echo "- Docker build and push"
          echo "- Deploy to production"
          
          # Placeholder for actual deployment commands
          echo "‚úÖ Telegram bot deployment completed"

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, deploy-telegram-bot]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary"
          echo "Master branch deployment completed."
          echo ""
          echo "**Frontend Status:** ${{ needs.deploy-frontend.result }}"
          echo "**Backend Status:** ${{ needs.deploy-backend.result }}"
          echo "**Telegram Bot Status:** ${{ needs.deploy-telegram-bot.result }}"
          
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && \
             [ "${{ needs.deploy-backend.result }}" == "success" ] && \
             [ "${{ needs.deploy-telegram-bot.result }}" == "success" ]; then
            echo "‚úÖ All deployments successful!"
          else
            echo "‚ùå Some deployments failed - check logs above"
            exit 1
          fi

      - name: Create Deployment Tag
        if: ${{ needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success' && needs.deploy-telegram-bot.result == 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `deploy-${new Date().toISOString().slice(0, 10)}-${context.sha.substring(0, 7)}`;
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              
              console.log(`‚úÖ Created deployment tag: ${tagName}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not create tag: ${error.message}`);
            }