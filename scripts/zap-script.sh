#!/bin/bash

# Set target URL (can be overridden by environment variable)
TARGET_URL=${ZAP_TARGET_URL:-"https://frontend-production-1884.up.railway.app/"}

# Set scan mode (strict, moderate, or permissive)
SCAN_MODE=${ZAP_SCAN_MODE:-"moderate"}

echo "Starting OWASP ZAP DAST scan for: $TARGET_URL"
echo "Scan mode: $SCAN_MODE"

# Pull latest ZAP image
docker pull zaproxy/zap-stable

# Create ZAP configuration if it doesn't exist
if [ ! -f "scripts/zap-rules.conf" ]; then
    echo "Creating default ZAP rules configuration..."
    mkdir -p scripts
    cat > scripts/zap-rules.conf << 'EOF'
# ZAP Baseline Rules - Default Configuration
# Ignore common false positives for staging environments
10038	IGNORE	.*	.*	CSP warnings in staging
10054	IGNORE	.*	.*	Cookie security in staging
10035	IGNORE	.*	.*	HTTPS redirect via proxy
EOF
fi

# Run ZAP baseline scan with configuration
echo "Running ZAP baseline scan with custom rules..."
docker run -v $(pwd):/zap/wrk/:rw \
  -t zaproxy/zap-stable zap-baseline.py \
  -t "$TARGET_URL" \
  -c scripts/zap-rules.conf \
  -r zap_baseline_report.html \
  -J zap_baseline_report.json \
  -w zap_baseline_report.md \
  -x zap_baseline_report.xml \
  -l PASS \
  -a

# Check exit code
EXIT_CODE=$?
echo "ZAP scan completed with exit code: $EXIT_CODE"

# Generate summary report
echo "Generating scan summary..."
cat > zap_scan_summary.md << EOF
# DAST Security Scan Summary

**Target:** $TARGET_URL  
**Scan Date:** $(date)  
**Scan Mode:** $SCAN_MODE  

## Results

EOF

# Exit codes: 0=no warnings, 1=warnings, 2=high risk alerts, 3=medium risk alerts
if [ $EXIT_CODE -eq 0 ]; then
    echo "✅ No security issues found"
    echo "✅ **PASSED** - No security issues detected" >> zap_scan_summary.md
    FINAL_EXIT=0
elif [ $EXIT_CODE -eq 1 ]; then
    echo "⚠️  Warnings found - check report"
    echo "⚠️ **WARNINGS** - Minor issues found, review recommended" >> zap_scan_summary.md
    FINAL_EXIT=0  # Don't fail CI for warnings
elif [ $EXIT_CODE -eq 2 ]; then
    echo "🚨 High risk security issues found!"
    echo "🚨 **FAILED** - High risk security issues detected!" >> zap_scan_summary.md
    echo "" >> zap_scan_summary.md
    echo "**Action Required:** Review and fix high-risk issues before deployment." >> zap_scan_summary.md
    FINAL_EXIT=1  # Fail CI for high risk
elif [ $EXIT_CODE -eq 3 ]; then
    echo "⚠️  Medium risk security issues found"
    if [ "$SCAN_MODE" = "strict" ]; then
        echo "🚨 **FAILED** - Medium risk issues in strict mode" >> zap_scan_summary.md
        FINAL_EXIT=1
    else
        echo "⚠️ **WARNING** - Medium risk issues found, review recommended" >> zap_scan_summary.md
        echo "" >> zap_scan_summary.md
        echo "**Recommendation:** Review medium-risk findings in the detailed report." >> zap_scan_summary.md
        FINAL_EXIT=0  # Don't fail CI for medium risk in moderate mode
    fi
else
    echo "❌ ZAP scan failed with unexpected exit code: $EXIT_CODE"
    echo "❌ **ERROR** - Scan failed unexpectedly" >> zap_scan_summary.md
    FINAL_EXIT=1
fi

# Add report links to summary
cat >> zap_scan_summary.md << EOF

## Reports Generated

- 📄 [HTML Report](zap_baseline_report.html)
- 📊 [JSON Report](zap_baseline_report.json)
- 📝 [Markdown Report](zap_baseline_report.md)
- 🔍 [XML Report](zap_baseline_report.xml)

## Next Steps

1. Review the detailed HTML report for specific findings
2. Address any high or medium risk issues
3. Update the ZAP rules configuration if needed
4. Re-run the scan after fixes

---
*Generated by OWASP ZAP DAST Scanner*
EOF

echo ""
echo "📊 Scan Summary:"
cat zap_scan_summary.md

# Set appropriate exit code based on scan mode and findings
echo ""
echo "Final exit code: $FINAL_EXIT"
exit $FINAL_EXIT
